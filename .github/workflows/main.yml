name: MeChat CI - Build -> Lint -> Test -> Deploy

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Publish application
        run: dotnet publish -c Release -o ./publish

      - name: Upload publish artifact
        uses: actions/upload-artifact@v4
        with:
          name: publish-folder
          path: ./publish

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

      # Optional - uncomment to enable formatting check
      # - name: Install dotnet format
      #   run: dotnet tool install --global dotnet-format

      # - name: Run dotnet format check
      #   run: dotnet format MeChat.sln --verify-no-changes --verbosity diagnostic

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

      - name: Restore MeChat.Architecture.Tests
        run: dotnet restore test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj

      - name: Build MeChat.Architecture.Tests
        run: dotnet build test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj --no-restore --configuration Release

      - name: Run MeChat.Architecture.Tests
        run: dotnet test test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj --no-build --configuration Release --logger "trx"

  deploy:
    name: Deploy to IIS Server (only on main)
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: test

    steps:
      - name: Download publish artifact
        uses: actions/download-artifact@v4
        with:
          name: publish-folder
          path: publish

      - name: Deploy to IIS via WinRM
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          VM_DEPLOY_FOLDER: ${{ secrets.VM_DEPLOY_FOLDER }}
        run: |
          # Configure WinRM client
          Set-Item WSMan:\localhost\Client\AllowUnencrypted -Value $true
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$env:VM_HOST" -Force

          # Create credential object
          $secpasswd = ConvertTo-SecureString "$env:VM_PASSWORD" -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($env:VM_USERNAME, $secpasswd)

          # Establish remote session
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic

          # Ensure remote folder exists
          Invoke-Command -Session $session -ScriptBlock {
            param($path)
            New-Item -Path $path -ItemType Directory -Force
          } -ArgumentList $env:VM_DEPLOY_FOLDER

          # Copy published files to target folder
          Copy-Item -Path ".\publish\*" -Destination $env:VM_DEPLOY_FOLDER -Recurse -Force -ToSession $session

          # Restart IIS to apply changes
          Invoke-Command -Session $session -ScriptBlock {
            iisreset
          }

          # Close session
          Remove-PSSession $session
