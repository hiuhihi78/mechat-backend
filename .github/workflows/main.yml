name: MeChat CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Projects
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'
      - name: Restore dependencies
        run: dotnet restore
      - name: Build solution
        run: dotnet build --configuration Release --no-restore
      - name: Publish MeChat.API
        if: github.ref == 'refs/heads/main'
        run: |
          ASPNETCORE_ENVIRONMENT=Production dotnet publish src/MeChat.API/MeChat.API.csproj -c Release -o ./publish-api

      - name: Publish Consumer (self-contained exe)
        if: github.ref == 'refs/heads/main'
        run: |
          ASPNETCORE_ENVIRONMENT=Production dotnet publish src/MeChat.Infrastructure.MessageBroker.Consumer/MeChat.Infrastructure.MessageBroker.Consumer.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o ./publish-consumer

      - name: Upload API artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: publish-api
          path: ./publish-api
      - name: Upload Consumer artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: publish-consumer
          path: ./publish-consumer

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'
      - run: dotnet restore test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj
      - run: dotnet build test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj --no-restore --configuration Release
      - run: dotnet test test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj --no-build --configuration Release --logger "trx"

  stop_api:
    name: Stop IIS (API)
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: test
    steps:
      - name: Stop IIS
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
        run: |
          Write-Host "=== STOP API (IIS) ==="
          Set-Item WSMan:\localhost\Client\AllowUnencrypted -Value $true
          Set-Item WSMan:\localhost\Client\Auth\Basic -Value $true
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value $env:VM_HOST -Force
          $sec = ConvertTo-SecureString $env:VM_PASSWORD -AsPlainText -Force
          $cred = New-Object PSCredential ($env:VM_USERNAME, $sec)
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic
          Invoke-Command -Session $session -ScriptBlock { iisreset /stop }
          Remove-PSSession $session

  stop_consumer:
    name: Stop Consumer
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: stop_api
    steps:
      - name: Stop Consumer service
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          VM_CONSUMER_SERVICE: ${{ secrets.VM_CONSUMER_SERVICE }}
        run: |
          Write-Host "=== STOP Consumer ==="
          Set-Item WSMan:\localhost\Client\AllowUnencrypted -Value $true
          Set-Item WSMan:\localhost\Client\Auth\Basic -Value $true
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value $env:VM_HOST -Force
          $sec = ConvertTo-SecureString $env:VM_PASSWORD -AsPlainText -Force
          $cred = New-Object PSCredential ($env:VM_USERNAME, $sec)
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic
          Invoke-Command -Session $session -ScriptBlock { param($svc) nssm stop $svc } -ArgumentList $env:VM_CONSUMER_SERVICE
          Remove-PSSession $session

  copy_api:
    name: Copy API files
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: stop_consumer
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: publish-api
          path: publish-api
      - name: Copy API to server
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          VM_DEPLOY_FOLDER: ${{ secrets.VM_DEPLOY_FOLDER }}
        run: |
          Write-Host "=== COPY API ==="
          $sec = ConvertTo-SecureString $env:VM_PASSWORD -AsPlainText -Force
          $cred = New-Object PSCredential ($env:VM_USERNAME, $sec)
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic
          Invoke-Command -Session $session -ScriptBlock { param($p) New-Item -Path $p -ItemType Directory -Force | Out-Null } -ArgumentList $env:VM_DEPLOY_FOLDER
          Copy-Item -Path ".\publish-api\*" -Destination $env:VM_DEPLOY_FOLDER -Recurse -Force -ToSession $session
          Remove-PSSession $session

  copy_consumer:
    name: Copy Consumer files
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: copy_api
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: publish-consumer
          path: publish-consumer
      - name: Copy Consumer to server
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          VM_DEPLOY_CONSUMER_FOLDER: ${{ secrets.VM_DEPLOY_CONSUMER_FOLDER }}
        run: |
          Write-Host "=== COPY Consumer ==="
          $sec = ConvertTo-SecureString $env:VM_PASSWORD -AsPlainText -Force
          $cred = New-Object PSCredential ($env:VM_USERNAME, $sec)
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic
          Invoke-Command -Session $session -ScriptBlock { param($p) New-Item -Path $p -ItemType Directory -Force | Out-Null } -ArgumentList $env:VM_DEPLOY_CONSUMER_FOLDER
          Copy-Item -Path ".\publish-consumer\*" -Destination $env:VM_DEPLOY_CONSUMER_FOLDER -Recurse -Force -ToSession $session
          Remove-PSSession $session

  start_api:
    name: Start IIS (API)
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: copy_consumer
    steps:
      - name: Start IIS
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
        run: |
          Write-Host "=== START API (IIS) ==="
          $sec = ConvertTo-SecureString $env:VM_PASSWORD -AsPlainText -Force
          $cred = New-Object PSCredential ($env:VM_USERNAME, $sec)
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic
          Invoke-Command -Session $session -ScriptBlock { iisreset /start }
          Remove-PSSession $session

  start_consumer:
    name: Start Consumer
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: start_api
    steps:
      - name: Start Consumer service
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          VM_CONSUMER_SERVICE: ${{ secrets.VM_CONSUMER_SERVICE }}
        run: |
          Write-Host "=== START Consumer ==="
          $sec = ConvertTo-SecureString $env:VM_PASSWORD -AsPlainText -Force
          $cred = New-Object PSCredential ($env:VM_USERNAME, $sec)
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic
          Invoke-Command -Session $session -ScriptBlock { param($svc) nssm start $svc } -ArgumentList $env:VM_CONSUMER_SERVICE
          Remove-PSSession $session
