name: MeChat CI/CD

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build Projects
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: Publish MeChat.API (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          ASPNETCORE_ENVIRONMENT=Production dotnet publish src/MeChat.API/MeChat.API.csproj -c Release -o ./publish-api

      - name: Publish MessageBroker.Consumer (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          ASPNETCORE_ENVIRONMENT=Production dotnet publish src/MeChat.Infrastructure.MessageBroker.Consumer/MeChat.Infrastructure.MessageBroker.Consumer.csproj -c Release -o ./publish-consumer

      - name: Upload API artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: publish-api
          path: ./publish-api

      - name: Upload Consumer artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: publish-consumer
          path: ./publish-consumer

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0'

      - name: Restore MeChat.Architecture.Tests
        run: dotnet restore test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj

      - name: Build MeChat.Architecture.Tests
        run: dotnet build test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj --no-restore --configuration Release

      - name: Run MeChat.Architecture.Tests
        run: dotnet test test/MeChat.Architecture.Tests/MeChat.Architecture.Tests.csproj --no-build --configuration Release --logger "trx"

  deploy:
    name: Deploy to IIS Server
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    needs: test

    steps:
      - name: Download API artifact
        uses: actions/download-artifact@v4
        with:
          name: publish-api
          path: publish-api

      - name: Download Consumer artifact
        uses: actions/download-artifact@v4
        with:
          name: publish-consumer
          path: publish-consumer

      - name: Deploy via WinRM
        shell: powershell
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USERNAME: ${{ secrets.VM_USERNAME }}
          VM_PASSWORD: ${{ secrets.VM_PASSWORD }}
          VM_DEPLOY_FOLDER: ${{ secrets.VM_DEPLOY_FOLDER }}
          VM_DEPLOY_CONSUMER_FOLDER: ${{ secrets.VM_DEPLOY_CONSUMER_FOLDER }}
          VM_CONSUMER_SERVICE: ${{ secrets.VM_CONSUMER_SERVICE }}
        run: |
          # Configure WinRM client
          Set-Item WSMan:\localhost\Client\AllowUnencrypted -Value $true
          Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$env:VM_HOST" -Force

          # Create credential
          $secpasswd = ConvertTo-SecureString "$env:VM_PASSWORD" -AsPlainText -Force
          $cred = New-Object System.Management.Automation.PSCredential ($env:VM_USERNAME, $secpasswd)

          # Open remote session
          $session = New-PSSession -ComputerName $env:VM_HOST -Credential $cred -Authentication Basic

          # Stop IIS + Consumer service if running
          Invoke-Command -Session $session -ScriptBlock {
            param($serviceName)
            iisreset /stop
            $svc = Get-Service $serviceName -ErrorAction SilentlyContinue
            if ($svc -and $svc.Status -eq 'Running') {
              Stop-Service $serviceName -Force
            }
          } -ArgumentList $env:VM_CONSUMER_SERVICE

          # Create folders if not exists
          Invoke-Command -Session $session -ScriptBlock {
            param($path1, $path2)
            New-Item -Path $path1 -ItemType Directory -Force
            New-Item -Path $path2 -ItemType Directory -Force
          } -ArgumentList $env:VM_DEPLOY_FOLDER, $env:VM_DEPLOY_CONSUMER_FOLDER

          # Copy API files
          Copy-Item -Path ".\publish-api\*" -Destination $env:VM_DEPLOY_FOLDER -Recurse -Force -ToSession $session

          # Copy Consumer files
          Copy-Item -Path ".\publish-consumer\*" -Destination $env:VM_DEPLOY_CONSUMER_FOLDER -Recurse -Force -ToSession $session

          # Tạo service Consumer bằng nssm nếu chưa có
          Invoke-Command -Session $session -ScriptBlock {
            param($serviceName, $consumerExe, $consumerDir)
            if (-not (Get-Service $serviceName -ErrorAction SilentlyContinue)) {
              nssm install $serviceName $consumerExe
              nssm set $serviceName AppDirectory $consumerDir
              nssm set $serviceName Start SERVICE_AUTO_START
            }
          } -ArgumentList $env:VM_CONSUMER_SERVICE, "$env:VM_DEPLOY_CONSUMER_FOLDER\MeChat.Infrastructure.MessageBroker.Consumer.exe", $env:VM_DEPLOY_CONSUMER_FOLDER

          # Restart IIS + Consumer service
          Invoke-Command -Session $session -ScriptBlock {
            param($serviceName)
            iisreset /start
            $svc = Get-Service $serviceName -ErrorAction SilentlyContinue
            if ($svc -and $svc.Status -ne 'Running') {
              Start-Service $serviceName
            }
          } -ArgumentList $env:VM_CONSUMER_SERVICE

          # Close remote session
          Remove-PSSession $session
